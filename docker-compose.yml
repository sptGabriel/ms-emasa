version: "3.7"

networks: 
  kong-net:
    driver: bridge

volumes:
  kong_data: {}
  pg-departament:
    external: true
  pg-user:
    external: true
  pg-employee:
    external: true
services:
  #######################################
  # Postgres: The database used by Kong
  #######################################
  kong-database:
    image: postgres:11
    container_name: kong-postgres
    restart: on-failure
    networks:
      - kong-net
    volumes:
      - kong_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: kong
      POSTGRES_DB: kong
      POSTGRES_PASSWORD: kong
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5434:5434"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 30s
      timeout: 30s
      retries: 3

  #######################################
  # Kong database migration
  #######################################
  kong-migration:
    image: kong:2.0.3-alpine
    command: kong migrations bootstrap
    networks:
      - kong-net
    restart: on-failure
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_DATABASE: kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
    links: 
      - kong-database
    depends_on:
      - kong-database

  #######################################
  # Kong: The API Gateway
  #######################################
  kong:
    image: kong:2.0.3-alpine
    restart: on-failure
    container_name: kong
    networks:
      - kong-net
    environment:
      KONG_DATABASE: postgres 
      KONG_PG_HOST: kong-database
      KONG_PG_DATABASE: kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PROXY_LISTEN: 0.0.0.0:8000
      KONG_PROXY_LISTEN_SSL: 0.0.0.0:8443
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
    depends_on:
      - kong-migration
      - kong-database
    healthcheck:
      test: ["CMD", "curl", "-f", "http://kong:8001"]
      interval: 10s
      timeout: 10s
      retries: 10
    ports:
      - "8000:8000"
      - "8001:8001"
      - "8443:8443"
      - "8444:8444"

  #######################################
  # Konga database prepare
  #######################################
  konga-prepare:
    image: pantsel/konga:latest
    command: "-c prepare -a postgres -u postgresql://kong:kong@kong-database:5434/konga"
    networks:
      - kong-net
    restart: on-failure
    links:
      - kong-database
    depends_on:
      - kong-database
  
  #######################################
  # Konga: Kong GUI
  #######################################
  konga:
    image: pantsel/konga:latest
    container_name: konga
    restart: always
    networks:
      - kong-net
    environment:
      DB_ADAPTER: postgres
      DB_HOST: kong-database
      DB_USER: kong
      TOKEN_SECRET: FUEDASHFUAEHFEUAHFEU;
      DB_DATABASE: kong
      NODE_ENV: development
    depends_on:
      - kong-database
    ports:
      - "1337:1337"

  # frontend:
  #   build: ./frontend
  #   container_name: frontend
  #   entrypoint: ./.docker/entrypoint.sh
  #   environment:
  #     - CHOKIDAR_USEPOLLING=true
  #   ports:
  #     - 3000:3000
  #   volumes:
  #     - ./frontend:/home/node/app
  #   tty: true
  # micro-hr:
  #   build: 
  #     context: .
  #     dockerfile: backend/micro-hr/Dockerfile
  #   entrypoint: ./.docker/entrypoint.sh
  #   container_name: micro-hr
  #   environment:
  #     - CHOKIDAR_USEPOLLING=true
  #   ports:
  #     - 3001:3000
  #   depends_on:
  #     - kong-database
  #     - rabbitmq
  #   volumes:
  #     - ./backend/micro-hr:/usr/src/api
  # micro-inventory:
  #   build:
  #     context: .
  #     dockerfile: backend/micro-inventory/Dockerfile
  #   entrypoint: ./backend/micro-inventory/.docker/entrypoint.sh
  #   container_name: micro-inventory
  #   environment:
  #     - CHOKIDAR_USEPOLLING=true
  #   networks:
  #     - kong-net
  #   ports:
  #     - 3002:3000
    # volumes:
    #   - ./backend/micro-inventory:/home/node/micro-inventory-api
    #   - ./backend/rabbitmq:/home/node/rabbitmq
  ms-user-db:
    image: postgres
    container_name: ms-user-db
    restart: always
    tty: true
    volumes:
      - pg-user:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=emasa
      - POSTGRES_PASSWORD=emasa03210
      - POSTGRES_DB=emasa_ti
    networks:
      - kong-net
    ports:
      - "5432:5432"
  ms-employee-db:
    image: postgres
    container_name: ms-employee-db
    restart: always
    tty: true
    volumes:
      - pg-employee:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=emasa
      - POSTGRES_PASSWORD=emasa03210
      - POSTGRES_DB=emasa_ti
    networks:
      - kong-net
    ports:
      - "5432:5432"
  ms-departament-db:
    image: postgres
    container_name: ms-departament-db
    restart: always
    tty: true
    volumes:
      - pg-departament:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=emasa
      - POSTGRES_PASSWORD=emasa03210
      - POSTGRES_DB=emasa_ti
    networks:
      - kong-net
    ports:
      - "5433:5433"
  rabbitmq:
    build: 
      context: .
      dockerfile: packages/rabbitmq/Dockerfile
    image: "rabbitmq:3.8-management-alpine"
    container_name: ms-rabbitmq
    hostname: rabbitmq
    ports:
      - "15672:15672"
      - "5672:5672"
    volumes:
      - "./.rabbitmq_data:/var/lib/rabbitmq/mnesia"
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin